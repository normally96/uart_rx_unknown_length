
uart_rx_unknown_length.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002324  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800245c  0800245c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800245c  0800245c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800245c  0800245c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800245c  0800245c  0001245c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002460  08002460  00012460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08002470  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002470  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005945  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000135e  00000000  00000000  0002597a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000658  00000000  00000000  00026cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005b0  00000000  00000000  00027330  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001299b  00000000  00000000  000278e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005470  00000000  00000000  0003a27b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00066332  00000000  00000000  0003f6eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a5a1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000188c  00000000  00000000  000a5a98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002418 	.word	0x08002418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002418 	.word	0x08002418

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f923 	bl	80003a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 ff34 	bl	8001fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f93b 	bl	8000412 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f903 	bl	80003be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000040 	.word	0x20000040

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000040 	.word	0x20000040

08000210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f003 0307 	and.w	r3, r3, #7
 800021e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000222:	68db      	ldr	r3, [r3, #12]
 8000224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000226:	68ba      	ldr	r2, [r7, #8]
 8000228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800022c:	4013      	ands	r3, r2
 800022e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800023c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <__NVIC_SetPriorityGrouping+0x44>)
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	60d3      	str	r3, [r2, #12]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <__NVIC_GetPriorityGrouping+0x18>)
 800025e:	68db      	ldr	r3, [r3, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	f003 0307 	and.w	r3, r3, #7
}
 8000266:	4618      	mov	r0, r3
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	4603      	mov	r3, r0
 800027c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000282:	2b00      	cmp	r3, #0
 8000284:	db0b      	blt.n	800029e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	f003 021f 	and.w	r2, r3, #31
 800028c:	4906      	ldr	r1, [pc, #24]	; (80002a8 <__NVIC_EnableIRQ+0x34>)
 800028e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000292:	095b      	lsrs	r3, r3, #5
 8000294:	2001      	movs	r0, #1
 8000296:	fa00 f202 	lsl.w	r2, r0, r2
 800029a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000300:	b480      	push	{r7}
 8000302:	b089      	sub	sp, #36	; 0x24
 8000304:	af00      	add	r7, sp, #0
 8000306:	60f8      	str	r0, [r7, #12]
 8000308:	60b9      	str	r1, [r7, #8]
 800030a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f003 0307 	and.w	r3, r3, #7
 8000312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000314:	69fb      	ldr	r3, [r7, #28]
 8000316:	f1c3 0307 	rsb	r3, r3, #7
 800031a:	2b04      	cmp	r3, #4
 800031c:	bf28      	it	cs
 800031e:	2304      	movcs	r3, #4
 8000320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	3304      	adds	r3, #4
 8000326:	2b06      	cmp	r3, #6
 8000328:	d902      	bls.n	8000330 <NVIC_EncodePriority+0x30>
 800032a:	69fb      	ldr	r3, [r7, #28]
 800032c:	3b03      	subs	r3, #3
 800032e:	e000      	b.n	8000332 <NVIC_EncodePriority+0x32>
 8000330:	2300      	movs	r3, #0
 8000332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000334:	f04f 32ff 	mov.w	r2, #4294967295
 8000338:	69bb      	ldr	r3, [r7, #24]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43da      	mvns	r2, r3
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	401a      	ands	r2, r3
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000348:	f04f 31ff 	mov.w	r1, #4294967295
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43d9      	mvns	r1, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	4313      	orrs	r3, r2
         );
}
 800035a:	4618      	mov	r0, r3
 800035c:	3724      	adds	r7, #36	; 0x24
 800035e:	46bd      	mov	sp, r7
 8000360:	bc80      	pop	{r7}
 8000362:	4770      	bx	lr

08000364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3b01      	subs	r3, #1
 8000370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000374:	d301      	bcc.n	800037a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000376:	2301      	movs	r3, #1
 8000378:	e00f      	b.n	800039a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800037a:	4a0a      	ldr	r2, [pc, #40]	; (80003a4 <SysTick_Config+0x40>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	3b01      	subs	r3, #1
 8000380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000382:	210f      	movs	r1, #15
 8000384:	f04f 30ff 	mov.w	r0, #4294967295
 8000388:	f7ff ff90 	bl	80002ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <SysTick_Config+0x40>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000392:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <SysTick_Config+0x40>)
 8000394:	2207      	movs	r2, #7
 8000396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	3708      	adds	r7, #8
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	e000e010 	.word	0xe000e010

080003a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003b0:	6878      	ldr	r0, [r7, #4]
 80003b2:	f7ff ff2d 	bl	8000210 <__NVIC_SetPriorityGrouping>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	60b9      	str	r1, [r7, #8]
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003d0:	f7ff ff42 	bl	8000258 <__NVIC_GetPriorityGrouping>
 80003d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	68b9      	ldr	r1, [r7, #8]
 80003da:	6978      	ldr	r0, [r7, #20]
 80003dc:	f7ff ff90 	bl	8000300 <NVIC_EncodePriority>
 80003e0:	4602      	mov	r2, r0
 80003e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e6:	4611      	mov	r1, r2
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff5f 	bl	80002ac <__NVIC_SetPriority>
}
 80003ee:	bf00      	nop
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	4603      	mov	r3, r0
 80003fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff35 	bl	8000274 <__NVIC_EnableIRQ>
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041a:	6878      	ldr	r0, [r7, #4]
 800041c:	f7ff ffa2 	bl	8000364 <SysTick_Config>
 8000420:	4603      	mov	r3, r0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
	...

0800042c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000434:	2300      	movs	r3, #0
 8000436:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d101      	bne.n	8000442 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800043e:	2301      	movs	r3, #1
 8000440:	e043      	b.n	80004ca <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	461a      	mov	r2, r3
 8000448:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <HAL_DMA_Init+0xa8>)
 800044a:	4413      	add	r3, r2
 800044c:	4a22      	ldr	r2, [pc, #136]	; (80004d8 <HAL_DMA_Init+0xac>)
 800044e:	fba2 2303 	umull	r2, r3, r2, r3
 8000452:	091b      	lsrs	r3, r3, #4
 8000454:	009a      	lsls	r2, r3, #2
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a1f      	ldr	r2, [pc, #124]	; (80004dc <HAL_DMA_Init+0xb0>)
 800045e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2202      	movs	r2, #2
 8000464:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000476:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800047a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000484:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000490:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800049c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80004a4:	68fa      	ldr	r2, [r7, #12]
 80004a6:	4313      	orrs	r3, r2
 80004a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2200      	movs	r2, #0
 80004b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2201      	movs	r2, #1
 80004bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2200      	movs	r2, #0
 80004c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80004c8:	2300      	movs	r3, #0
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3714      	adds	r7, #20
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	bffdfff8 	.word	0xbffdfff8
 80004d8:	cccccccd 	.word	0xcccccccd
 80004dc:	40020000 	.word	0x40020000

080004e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
 80004ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80004ee:	2300      	movs	r3, #0
 80004f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d101      	bne.n	8000500 <HAL_DMA_Start_IT+0x20>
 80004fc:	2302      	movs	r3, #2
 80004fe:	e04a      	b.n	8000596 <HAL_DMA_Start_IT+0xb6>
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	2201      	movs	r2, #1
 8000504:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800050e:	2b01      	cmp	r3, #1
 8000510:	d13a      	bne.n	8000588 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2202      	movs	r2, #2
 8000516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2200      	movs	r2, #0
 800051e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f022 0201 	bic.w	r2, r2, #1
 800052e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	68b9      	ldr	r1, [r7, #8]
 8000536:	68f8      	ldr	r0, [r7, #12]
 8000538:	f000 f9ae 	bl	8000898 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000540:	2b00      	cmp	r3, #0
 8000542:	d008      	beq.n	8000556 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f042 020e 	orr.w	r2, r2, #14
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e00f      	b.n	8000576 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f022 0204 	bic.w	r2, r2, #4
 8000564:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f042 020a 	orr.w	r2, r2, #10
 8000574:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f042 0201 	orr.w	r2, r2, #1
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	e005      	b.n	8000594 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000590:	2302      	movs	r3, #2
 8000592:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000594:	7dfb      	ldrb	r3, [r7, #23]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d005      	beq.n	80005c2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	2204      	movs	r2, #4
 80005ba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80005bc:	2301      	movs	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e051      	b.n	8000666 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f022 020e 	bic.w	r2, r2, #14
 80005d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681a      	ldr	r2, [r3, #0]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f022 0201 	bic.w	r2, r2, #1
 80005e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a22      	ldr	r2, [pc, #136]	; (8000670 <HAL_DMA_Abort_IT+0xd0>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d029      	beq.n	8000640 <HAL_DMA_Abort_IT+0xa0>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a20      	ldr	r2, [pc, #128]	; (8000674 <HAL_DMA_Abort_IT+0xd4>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d022      	beq.n	800063c <HAL_DMA_Abort_IT+0x9c>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a1f      	ldr	r2, [pc, #124]	; (8000678 <HAL_DMA_Abort_IT+0xd8>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d01a      	beq.n	8000636 <HAL_DMA_Abort_IT+0x96>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a1d      	ldr	r2, [pc, #116]	; (800067c <HAL_DMA_Abort_IT+0xdc>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d012      	beq.n	8000630 <HAL_DMA_Abort_IT+0x90>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <HAL_DMA_Abort_IT+0xe0>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d00a      	beq.n	800062a <HAL_DMA_Abort_IT+0x8a>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <HAL_DMA_Abort_IT+0xe4>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d102      	bne.n	8000624 <HAL_DMA_Abort_IT+0x84>
 800061e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000622:	e00e      	b.n	8000642 <HAL_DMA_Abort_IT+0xa2>
 8000624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000628:	e00b      	b.n	8000642 <HAL_DMA_Abort_IT+0xa2>
 800062a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062e:	e008      	b.n	8000642 <HAL_DMA_Abort_IT+0xa2>
 8000630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000634:	e005      	b.n	8000642 <HAL_DMA_Abort_IT+0xa2>
 8000636:	f44f 7380 	mov.w	r3, #256	; 0x100
 800063a:	e002      	b.n	8000642 <HAL_DMA_Abort_IT+0xa2>
 800063c:	2310      	movs	r3, #16
 800063e:	e000      	b.n	8000642 <HAL_DMA_Abort_IT+0xa2>
 8000640:	2301      	movs	r3, #1
 8000642:	4a11      	ldr	r2, [pc, #68]	; (8000688 <HAL_DMA_Abort_IT+0xe8>)
 8000644:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2201      	movs	r2, #1
 800064a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	4798      	blx	r3
    } 
  }
  return status;
 8000666:	7bfb      	ldrb	r3, [r7, #15]
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40020008 	.word	0x40020008
 8000674:	4002001c 	.word	0x4002001c
 8000678:	40020030 	.word	0x40020030
 800067c:	40020044 	.word	0x40020044
 8000680:	40020058 	.word	0x40020058
 8000684:	4002006c 	.word	0x4002006c
 8000688:	40020000 	.word	0x40020000

0800068c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	2204      	movs	r2, #4
 80006aa:	409a      	lsls	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4013      	ands	r3, r2
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d04f      	beq.n	8000754 <HAL_DMA_IRQHandler+0xc8>
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d04a      	beq.n	8000754 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f003 0320 	and.w	r3, r3, #32
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d107      	bne.n	80006dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f022 0204 	bic.w	r2, r2, #4
 80006da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a66      	ldr	r2, [pc, #408]	; (800087c <HAL_DMA_IRQHandler+0x1f0>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d029      	beq.n	800073a <HAL_DMA_IRQHandler+0xae>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a65      	ldr	r2, [pc, #404]	; (8000880 <HAL_DMA_IRQHandler+0x1f4>)
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d022      	beq.n	8000736 <HAL_DMA_IRQHandler+0xaa>
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a63      	ldr	r2, [pc, #396]	; (8000884 <HAL_DMA_IRQHandler+0x1f8>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d01a      	beq.n	8000730 <HAL_DMA_IRQHandler+0xa4>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a62      	ldr	r2, [pc, #392]	; (8000888 <HAL_DMA_IRQHandler+0x1fc>)
 8000700:	4293      	cmp	r3, r2
 8000702:	d012      	beq.n	800072a <HAL_DMA_IRQHandler+0x9e>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a60      	ldr	r2, [pc, #384]	; (800088c <HAL_DMA_IRQHandler+0x200>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d00a      	beq.n	8000724 <HAL_DMA_IRQHandler+0x98>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a5f      	ldr	r2, [pc, #380]	; (8000890 <HAL_DMA_IRQHandler+0x204>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d102      	bne.n	800071e <HAL_DMA_IRQHandler+0x92>
 8000718:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071c:	e00e      	b.n	800073c <HAL_DMA_IRQHandler+0xb0>
 800071e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000722:	e00b      	b.n	800073c <HAL_DMA_IRQHandler+0xb0>
 8000724:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000728:	e008      	b.n	800073c <HAL_DMA_IRQHandler+0xb0>
 800072a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800072e:	e005      	b.n	800073c <HAL_DMA_IRQHandler+0xb0>
 8000730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000734:	e002      	b.n	800073c <HAL_DMA_IRQHandler+0xb0>
 8000736:	2340      	movs	r3, #64	; 0x40
 8000738:	e000      	b.n	800073c <HAL_DMA_IRQHandler+0xb0>
 800073a:	2304      	movs	r3, #4
 800073c:	4a55      	ldr	r2, [pc, #340]	; (8000894 <HAL_DMA_IRQHandler+0x208>)
 800073e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000744:	2b00      	cmp	r3, #0
 8000746:	f000 8094 	beq.w	8000872 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000752:	e08e      	b.n	8000872 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000758:	2202      	movs	r2, #2
 800075a:	409a      	lsls	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4013      	ands	r3, r2
 8000760:	2b00      	cmp	r3, #0
 8000762:	d056      	beq.n	8000812 <HAL_DMA_IRQHandler+0x186>
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	2b00      	cmp	r3, #0
 800076c:	d051      	beq.n	8000812 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f003 0320 	and.w	r3, r3, #32
 8000778:	2b00      	cmp	r3, #0
 800077a:	d10b      	bne.n	8000794 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f022 020a 	bic.w	r2, r2, #10
 800078a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2201      	movs	r2, #1
 8000790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a38      	ldr	r2, [pc, #224]	; (800087c <HAL_DMA_IRQHandler+0x1f0>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d029      	beq.n	80007f2 <HAL_DMA_IRQHandler+0x166>
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a37      	ldr	r2, [pc, #220]	; (8000880 <HAL_DMA_IRQHandler+0x1f4>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d022      	beq.n	80007ee <HAL_DMA_IRQHandler+0x162>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a35      	ldr	r2, [pc, #212]	; (8000884 <HAL_DMA_IRQHandler+0x1f8>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d01a      	beq.n	80007e8 <HAL_DMA_IRQHandler+0x15c>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4a34      	ldr	r2, [pc, #208]	; (8000888 <HAL_DMA_IRQHandler+0x1fc>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d012      	beq.n	80007e2 <HAL_DMA_IRQHandler+0x156>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a32      	ldr	r2, [pc, #200]	; (800088c <HAL_DMA_IRQHandler+0x200>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d00a      	beq.n	80007dc <HAL_DMA_IRQHandler+0x150>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a31      	ldr	r2, [pc, #196]	; (8000890 <HAL_DMA_IRQHandler+0x204>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d102      	bne.n	80007d6 <HAL_DMA_IRQHandler+0x14a>
 80007d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80007d4:	e00e      	b.n	80007f4 <HAL_DMA_IRQHandler+0x168>
 80007d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007da:	e00b      	b.n	80007f4 <HAL_DMA_IRQHandler+0x168>
 80007dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007e0:	e008      	b.n	80007f4 <HAL_DMA_IRQHandler+0x168>
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	e005      	b.n	80007f4 <HAL_DMA_IRQHandler+0x168>
 80007e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007ec:	e002      	b.n	80007f4 <HAL_DMA_IRQHandler+0x168>
 80007ee:	2320      	movs	r3, #32
 80007f0:	e000      	b.n	80007f4 <HAL_DMA_IRQHandler+0x168>
 80007f2:	2302      	movs	r3, #2
 80007f4:	4a27      	ldr	r2, [pc, #156]	; (8000894 <HAL_DMA_IRQHandler+0x208>)
 80007f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000804:	2b00      	cmp	r3, #0
 8000806:	d034      	beq.n	8000872 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000810:	e02f      	b.n	8000872 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	2208      	movs	r2, #8
 8000818:	409a      	lsls	r2, r3
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4013      	ands	r3, r2
 800081e:	2b00      	cmp	r3, #0
 8000820:	d028      	beq.n	8000874 <HAL_DMA_IRQHandler+0x1e8>
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	f003 0308 	and.w	r3, r3, #8
 8000828:	2b00      	cmp	r3, #0
 800082a:	d023      	beq.n	8000874 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f022 020e 	bic.w	r2, r2, #14
 800083a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000844:	2101      	movs	r1, #1
 8000846:	fa01 f202 	lsl.w	r2, r1, r2
 800084a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2201      	movs	r2, #1
 8000850:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2201      	movs	r2, #1
 8000856:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2200      	movs	r2, #0
 800085e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	2b00      	cmp	r3, #0
 8000868:	d004      	beq.n	8000874 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	4798      	blx	r3
    }
  }
  return;
 8000872:	bf00      	nop
 8000874:	bf00      	nop
}
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40020008 	.word	0x40020008
 8000880:	4002001c 	.word	0x4002001c
 8000884:	40020030 	.word	0x40020030
 8000888:	40020044 	.word	0x40020044
 800088c:	40020058 	.word	0x40020058
 8000890:	4002006c 	.word	0x4002006c
 8000894:	40020000 	.word	0x40020000

08000898 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ae:	2101      	movs	r1, #1
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	683a      	ldr	r2, [r7, #0]
 80008bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	2b10      	cmp	r3, #16
 80008c4:	d108      	bne.n	80008d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80008d6:	e007      	b.n	80008e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	68ba      	ldr	r2, [r7, #8]
 80008de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	60da      	str	r2, [r3, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
	...

080008f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b08b      	sub	sp, #44	; 0x2c
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000906:	e127      	b.n	8000b58 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000908:	2201      	movs	r2, #1
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	69fa      	ldr	r2, [r7, #28]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	429a      	cmp	r2, r3
 8000922:	f040 8116 	bne.w	8000b52 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b12      	cmp	r3, #18
 800092c:	d034      	beq.n	8000998 <HAL_GPIO_Init+0xa4>
 800092e:	2b12      	cmp	r3, #18
 8000930:	d80d      	bhi.n	800094e <HAL_GPIO_Init+0x5a>
 8000932:	2b02      	cmp	r3, #2
 8000934:	d02b      	beq.n	800098e <HAL_GPIO_Init+0x9a>
 8000936:	2b02      	cmp	r3, #2
 8000938:	d804      	bhi.n	8000944 <HAL_GPIO_Init+0x50>
 800093a:	2b00      	cmp	r3, #0
 800093c:	d031      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 800093e:	2b01      	cmp	r3, #1
 8000940:	d01c      	beq.n	800097c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000942:	e048      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000944:	2b03      	cmp	r3, #3
 8000946:	d043      	beq.n	80009d0 <HAL_GPIO_Init+0xdc>
 8000948:	2b11      	cmp	r3, #17
 800094a:	d01b      	beq.n	8000984 <HAL_GPIO_Init+0x90>
          break;
 800094c:	e043      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800094e:	4a89      	ldr	r2, [pc, #548]	; (8000b74 <HAL_GPIO_Init+0x280>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d026      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000954:	4a87      	ldr	r2, [pc, #540]	; (8000b74 <HAL_GPIO_Init+0x280>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d806      	bhi.n	8000968 <HAL_GPIO_Init+0x74>
 800095a:	4a87      	ldr	r2, [pc, #540]	; (8000b78 <HAL_GPIO_Init+0x284>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d020      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000960:	4a86      	ldr	r2, [pc, #536]	; (8000b7c <HAL_GPIO_Init+0x288>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d01d      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
          break;
 8000966:	e036      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000968:	4a85      	ldr	r2, [pc, #532]	; (8000b80 <HAL_GPIO_Init+0x28c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d019      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 800096e:	4a85      	ldr	r2, [pc, #532]	; (8000b84 <HAL_GPIO_Init+0x290>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d016      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
 8000974:	4a84      	ldr	r2, [pc, #528]	; (8000b88 <HAL_GPIO_Init+0x294>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d013      	beq.n	80009a2 <HAL_GPIO_Init+0xae>
          break;
 800097a:	e02c      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	623b      	str	r3, [r7, #32]
          break;
 8000982:	e028      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	3304      	adds	r3, #4
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	e023      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	68db      	ldr	r3, [r3, #12]
 8000992:	3308      	adds	r3, #8
 8000994:	623b      	str	r3, [r7, #32]
          break;
 8000996:	e01e      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	330c      	adds	r3, #12
 800099e:	623b      	str	r3, [r7, #32]
          break;
 80009a0:	e019      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d102      	bne.n	80009b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009aa:	2304      	movs	r3, #4
 80009ac:	623b      	str	r3, [r7, #32]
          break;
 80009ae:	e012      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d105      	bne.n	80009c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009b8:	2308      	movs	r3, #8
 80009ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	69fa      	ldr	r2, [r7, #28]
 80009c0:	611a      	str	r2, [r3, #16]
          break;
 80009c2:	e008      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c4:	2308      	movs	r3, #8
 80009c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	69fa      	ldr	r2, [r7, #28]
 80009cc:	615a      	str	r2, [r3, #20]
          break;
 80009ce:	e002      	b.n	80009d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
          break;
 80009d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	2bff      	cmp	r3, #255	; 0xff
 80009da:	d801      	bhi.n	80009e0 <HAL_GPIO_Init+0xec>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	e001      	b.n	80009e4 <HAL_GPIO_Init+0xf0>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3304      	adds	r3, #4
 80009e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	2bff      	cmp	r3, #255	; 0xff
 80009ea:	d802      	bhi.n	80009f2 <HAL_GPIO_Init+0xfe>
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	e002      	b.n	80009f8 <HAL_GPIO_Init+0x104>
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	3b08      	subs	r3, #8
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	210f      	movs	r1, #15
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	fa01 f303 	lsl.w	r3, r1, r3
 8000a06:	43db      	mvns	r3, r3
 8000a08:	401a      	ands	r2, r3
 8000a0a:	6a39      	ldr	r1, [r7, #32]
 8000a0c:	693b      	ldr	r3, [r7, #16]
 8000a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a12:	431a      	orrs	r2, r3
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f000 8096 	beq.w	8000b52 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a26:	4b59      	ldr	r3, [pc, #356]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a58      	ldr	r2, [pc, #352]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6193      	str	r3, [r2, #24]
 8000a32:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <HAL_GPIO_Init+0x298>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a3e:	4a54      	ldr	r2, [pc, #336]	; (8000b90 <HAL_GPIO_Init+0x29c>)
 8000a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	220f      	movs	r2, #15
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	68fa      	ldr	r2, [r7, #12]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4b      	ldr	r2, [pc, #300]	; (8000b94 <HAL_GPIO_Init+0x2a0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d013      	beq.n	8000a92 <HAL_GPIO_Init+0x19e>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4a      	ldr	r2, [pc, #296]	; (8000b98 <HAL_GPIO_Init+0x2a4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d00d      	beq.n	8000a8e <HAL_GPIO_Init+0x19a>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a49      	ldr	r2, [pc, #292]	; (8000b9c <HAL_GPIO_Init+0x2a8>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d007      	beq.n	8000a8a <HAL_GPIO_Init+0x196>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a48      	ldr	r2, [pc, #288]	; (8000ba0 <HAL_GPIO_Init+0x2ac>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_GPIO_Init+0x192>
 8000a82:	2303      	movs	r3, #3
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a86:	2304      	movs	r3, #4
 8000a88:	e004      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	e002      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e000      	b.n	8000a94 <HAL_GPIO_Init+0x1a0>
 8000a92:	2300      	movs	r3, #0
 8000a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a96:	f002 0203 	and.w	r2, r2, #3
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	4093      	lsls	r3, r2
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aa4:	493a      	ldr	r1, [pc, #232]	; (8000b90 <HAL_GPIO_Init+0x29c>)
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	3302      	adds	r3, #2
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4938      	ldr	r1, [pc, #224]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]
 8000aca:	e006      	b.n	8000ada <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000acc:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4933      	ldr	r1, [pc, #204]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d006      	beq.n	8000af4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000ae8:	685a      	ldr	r2, [r3, #4]
 8000aea:	492e      	ldr	r1, [pc, #184]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	604b      	str	r3, [r1, #4]
 8000af2:	e006      	b.n	8000b02 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000af4:	4b2b      	ldr	r3, [pc, #172]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	4929      	ldr	r1, [pc, #164]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	4924      	ldr	r1, [pc, #144]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	608b      	str	r3, [r1, #8]
 8000b1a:	e006      	b.n	8000b2a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	491f      	ldr	r1, [pc, #124]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b36:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	491a      	ldr	r1, [pc, #104]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60cb      	str	r3, [r1, #12]
 8000b42:	e006      	b.n	8000b52 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	4915      	ldr	r1, [pc, #84]	; (8000ba4 <HAL_GPIO_Init+0x2b0>)
 8000b4e:	4013      	ands	r3, r2
 8000b50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	3301      	adds	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f47f aed0 	bne.w	8000908 <HAL_GPIO_Init+0x14>
  }
}
 8000b68:	bf00      	nop
 8000b6a:	372c      	adds	r7, #44	; 0x2c
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	10210000 	.word	0x10210000
 8000b78:	10110000 	.word	0x10110000
 8000b7c:	10120000 	.word	0x10120000
 8000b80:	10310000 	.word	0x10310000
 8000b84:	10320000 	.word	0x10320000
 8000b88:	10220000 	.word	0x10220000
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	40010000 	.word	0x40010000
 8000b94:	40010800 	.word	0x40010800
 8000b98:	40010c00 	.word	0x40010c00
 8000b9c:	40011000 	.word	0x40011000
 8000ba0:	40011400 	.word	0x40011400
 8000ba4:	40010400 	.word	0x40010400

08000ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e26c      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 8087 	beq.w	8000cd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bc8:	4b92      	ldr	r3, [pc, #584]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f003 030c 	and.w	r3, r3, #12
 8000bd0:	2b04      	cmp	r3, #4
 8000bd2:	d00c      	beq.n	8000bee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd4:	4b8f      	ldr	r3, [pc, #572]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f003 030c 	and.w	r3, r3, #12
 8000bdc:	2b08      	cmp	r3, #8
 8000bde:	d112      	bne.n	8000c06 <HAL_RCC_OscConfig+0x5e>
 8000be0:	4b8c      	ldr	r3, [pc, #560]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bec:	d10b      	bne.n	8000c06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bee:	4b89      	ldr	r3, [pc, #548]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d06c      	beq.n	8000cd4 <HAL_RCC_OscConfig+0x12c>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d168      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e246      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c0e:	d106      	bne.n	8000c1e <HAL_RCC_OscConfig+0x76>
 8000c10:	4b80      	ldr	r3, [pc, #512]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a7f      	ldr	r2, [pc, #508]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	e02e      	b.n	8000c7c <HAL_RCC_OscConfig+0xd4>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d10c      	bne.n	8000c40 <HAL_RCC_OscConfig+0x98>
 8000c26:	4b7b      	ldr	r3, [pc, #492]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a7a      	ldr	r2, [pc, #488]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c30:	6013      	str	r3, [r2, #0]
 8000c32:	4b78      	ldr	r3, [pc, #480]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a77      	ldr	r2, [pc, #476]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	e01d      	b.n	8000c7c <HAL_RCC_OscConfig+0xd4>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c48:	d10c      	bne.n	8000c64 <HAL_RCC_OscConfig+0xbc>
 8000c4a:	4b72      	ldr	r3, [pc, #456]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a71      	ldr	r2, [pc, #452]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	4b6f      	ldr	r3, [pc, #444]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a6e      	ldr	r2, [pc, #440]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	e00b      	b.n	8000c7c <HAL_RCC_OscConfig+0xd4>
 8000c64:	4b6b      	ldr	r3, [pc, #428]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a6a      	ldr	r2, [pc, #424]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	4b68      	ldr	r3, [pc, #416]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a67      	ldr	r2, [pc, #412]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d013      	beq.n	8000cac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c84:	f7ff faba 	bl	80001fc <HAL_GetTick>
 8000c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c8a:	e008      	b.n	8000c9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c8c:	f7ff fab6 	bl	80001fc <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b64      	cmp	r3, #100	; 0x64
 8000c98:	d901      	bls.n	8000c9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e1fa      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9e:	4b5d      	ldr	r3, [pc, #372]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f0      	beq.n	8000c8c <HAL_RCC_OscConfig+0xe4>
 8000caa:	e014      	b.n	8000cd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cac:	f7ff faa6 	bl	80001fc <HAL_GetTick>
 8000cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb2:	e008      	b.n	8000cc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb4:	f7ff faa2 	bl	80001fc <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	2b64      	cmp	r3, #100	; 0x64
 8000cc0:	d901      	bls.n	8000cc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e1e6      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc6:	4b53      	ldr	r3, [pc, #332]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d1f0      	bne.n	8000cb4 <HAL_RCC_OscConfig+0x10c>
 8000cd2:	e000      	b.n	8000cd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d063      	beq.n	8000daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ce2:	4b4c      	ldr	r3, [pc, #304]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 030c 	and.w	r3, r3, #12
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00b      	beq.n	8000d06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cee:	4b49      	ldr	r3, [pc, #292]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	2b08      	cmp	r3, #8
 8000cf8:	d11c      	bne.n	8000d34 <HAL_RCC_OscConfig+0x18c>
 8000cfa:	4b46      	ldr	r3, [pc, #280]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d116      	bne.n	8000d34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d06:	4b43      	ldr	r3, [pc, #268]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d005      	beq.n	8000d1e <HAL_RCC_OscConfig+0x176>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d001      	beq.n	8000d1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e1ba      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1e:	4b3d      	ldr	r3, [pc, #244]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	4939      	ldr	r1, [pc, #228]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d32:	e03a      	b.n	8000daa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	691b      	ldr	r3, [r3, #16]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d020      	beq.n	8000d7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d3c:	4b36      	ldr	r3, [pc, #216]	; (8000e18 <HAL_RCC_OscConfig+0x270>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d42:	f7ff fa5b 	bl	80001fc <HAL_GetTick>
 8000d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d48:	e008      	b.n	8000d5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d4a:	f7ff fa57 	bl	80001fc <HAL_GetTick>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e19b      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5c:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0302 	and.w	r3, r3, #2
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0f0      	beq.n	8000d4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d68:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	4927      	ldr	r1, [pc, #156]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	600b      	str	r3, [r1, #0]
 8000d7c:	e015      	b.n	8000daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d7e:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <HAL_RCC_OscConfig+0x270>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d84:	f7ff fa3a 	bl	80001fc <HAL_GetTick>
 8000d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8a:	e008      	b.n	8000d9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d8c:	f7ff fa36 	bl	80001fc <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d901      	bls.n	8000d9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e17a      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9e:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1f0      	bne.n	8000d8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d03a      	beq.n	8000e2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d019      	beq.n	8000df2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dbe:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_RCC_OscConfig+0x274>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc4:	f7ff fa1a 	bl	80001fc <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dcc:	f7ff fa16 	bl	80001fc <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e15a      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f000 fada 	bl	80013a4 <RCC_Delay>
 8000df0:	e01c      	b.n	8000e2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_RCC_OscConfig+0x274>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df8:	f7ff fa00 	bl	80001fc <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfe:	e00f      	b.n	8000e20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e00:	f7ff f9fc 	bl	80001fc <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d908      	bls.n	8000e20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e140      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	42420000 	.word	0x42420000
 8000e1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e20:	4b9e      	ldr	r3, [pc, #632]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d1e9      	bne.n	8000e00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f003 0304 	and.w	r3, r3, #4
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f000 80a6 	beq.w	8000f86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e3e:	4b97      	ldr	r3, [pc, #604]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10d      	bne.n	8000e66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b94      	ldr	r3, [pc, #592]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a93      	ldr	r2, [pc, #588]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b91      	ldr	r3, [pc, #580]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e62:	2301      	movs	r3, #1
 8000e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e66:	4b8e      	ldr	r3, [pc, #568]	; (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d118      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e72:	4b8b      	ldr	r3, [pc, #556]	; (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a8a      	ldr	r2, [pc, #552]	; (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e7e:	f7ff f9bd 	bl	80001fc <HAL_GetTick>
 8000e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e86:	f7ff f9b9 	bl	80001fc <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b64      	cmp	r3, #100	; 0x64
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e0fd      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e98:	4b81      	ldr	r3, [pc, #516]	; (80010a0 <HAL_RCC_OscConfig+0x4f8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f0      	beq.n	8000e86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d106      	bne.n	8000eba <HAL_RCC_OscConfig+0x312>
 8000eac:	4b7b      	ldr	r3, [pc, #492]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000eae:	6a1b      	ldr	r3, [r3, #32]
 8000eb0:	4a7a      	ldr	r2, [pc, #488]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6213      	str	r3, [r2, #32]
 8000eb8:	e02d      	b.n	8000f16 <HAL_RCC_OscConfig+0x36e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10c      	bne.n	8000edc <HAL_RCC_OscConfig+0x334>
 8000ec2:	4b76      	ldr	r3, [pc, #472]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	6a1b      	ldr	r3, [r3, #32]
 8000ec6:	4a75      	ldr	r2, [pc, #468]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000ec8:	f023 0301 	bic.w	r3, r3, #1
 8000ecc:	6213      	str	r3, [r2, #32]
 8000ece:	4b73      	ldr	r3, [pc, #460]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4a72      	ldr	r2, [pc, #456]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000ed4:	f023 0304 	bic.w	r3, r3, #4
 8000ed8:	6213      	str	r3, [r2, #32]
 8000eda:	e01c      	b.n	8000f16 <HAL_RCC_OscConfig+0x36e>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	2b05      	cmp	r3, #5
 8000ee2:	d10c      	bne.n	8000efe <HAL_RCC_OscConfig+0x356>
 8000ee4:	4b6d      	ldr	r3, [pc, #436]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	4a6c      	ldr	r2, [pc, #432]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000eea:	f043 0304 	orr.w	r3, r3, #4
 8000eee:	6213      	str	r3, [r2, #32]
 8000ef0:	4b6a      	ldr	r3, [pc, #424]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	4a69      	ldr	r2, [pc, #420]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6213      	str	r3, [r2, #32]
 8000efc:	e00b      	b.n	8000f16 <HAL_RCC_OscConfig+0x36e>
 8000efe:	4b67      	ldr	r3, [pc, #412]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4a66      	ldr	r2, [pc, #408]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000f04:	f023 0301 	bic.w	r3, r3, #1
 8000f08:	6213      	str	r3, [r2, #32]
 8000f0a:	4b64      	ldr	r3, [pc, #400]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	4a63      	ldr	r2, [pc, #396]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000f10:	f023 0304 	bic.w	r3, r3, #4
 8000f14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d015      	beq.n	8000f4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1e:	f7ff f96d 	bl	80001fc <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f24:	e00a      	b.n	8000f3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f26:	f7ff f969 	bl	80001fc <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e0ab      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f3c:	4b57      	ldr	r3, [pc, #348]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000f3e:	6a1b      	ldr	r3, [r3, #32]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0ee      	beq.n	8000f26 <HAL_RCC_OscConfig+0x37e>
 8000f48:	e014      	b.n	8000f74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f4a:	f7ff f957 	bl	80001fc <HAL_GetTick>
 8000f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f50:	e00a      	b.n	8000f68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f52:	f7ff f953 	bl	80001fc <HAL_GetTick>
 8000f56:	4602      	mov	r2, r0
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e095      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f68:	4b4c      	ldr	r3, [pc, #304]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1ee      	bne.n	8000f52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f74:	7dfb      	ldrb	r3, [r7, #23]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d105      	bne.n	8000f86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f7a:	4b48      	ldr	r3, [pc, #288]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a47      	ldr	r2, [pc, #284]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8081 	beq.w	8001092 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f90:	4b42      	ldr	r3, [pc, #264]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d061      	beq.n	8001060 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d146      	bne.n	8001032 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa4:	4b3f      	ldr	r3, [pc, #252]	; (80010a4 <HAL_RCC_OscConfig+0x4fc>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000faa:	f7ff f927 	bl	80001fc <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb0:	e008      	b.n	8000fc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fb2:	f7ff f923 	bl	80001fc <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d901      	bls.n	8000fc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e067      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc4:	4b35      	ldr	r3, [pc, #212]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1f0      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd8:	d108      	bne.n	8000fec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	492d      	ldr	r1, [pc, #180]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fec:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a19      	ldr	r1, [r3, #32]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	4927      	ldr	r1, [pc, #156]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <HAL_RCC_OscConfig+0x4fc>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100a:	f7ff f8f7 	bl	80001fc <HAL_GetTick>
 800100e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001012:	f7ff f8f3 	bl	80001fc <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e037      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x46a>
 8001030:	e02f      	b.n	8001092 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <HAL_RCC_OscConfig+0x4fc>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001038:	f7ff f8e0 	bl	80001fc <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001040:	f7ff f8dc 	bl	80001fc <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e020      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001052:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0x498>
 800105e:	e018      	b.n	8001092 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69db      	ldr	r3, [r3, #28]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e013      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_RCC_OscConfig+0x4f4>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	429a      	cmp	r2, r3
 800107e:	d106      	bne.n	800108e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800108a:	429a      	cmp	r2, r3
 800108c:	d001      	beq.n	8001092 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000
 80010a0:	40007000 	.word	0x40007000
 80010a4:	42420060 	.word	0x42420060

080010a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e0d0      	b.n	800125e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010bc:	4b6a      	ldr	r3, [pc, #424]	; (8001268 <HAL_RCC_ClockConfig+0x1c0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0307 	and.w	r3, r3, #7
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d910      	bls.n	80010ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ca:	4b67      	ldr	r3, [pc, #412]	; (8001268 <HAL_RCC_ClockConfig+0x1c0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 0207 	bic.w	r2, r3, #7
 80010d2:	4965      	ldr	r1, [pc, #404]	; (8001268 <HAL_RCC_ClockConfig+0x1c0>)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <HAL_RCC_ClockConfig+0x1c0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0b8      	b.n	800125e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d020      	beq.n	800113a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001104:	4b59      	ldr	r3, [pc, #356]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	4a58      	ldr	r2, [pc, #352]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800110e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800111c:	4b53      	ldr	r3, [pc, #332]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	4a52      	ldr	r2, [pc, #328]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001126:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001128:	4b50      	ldr	r3, [pc, #320]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	494d      	ldr	r1, [pc, #308]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	4313      	orrs	r3, r2
 8001138:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d040      	beq.n	80011c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d107      	bne.n	800115e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b47      	ldr	r3, [pc, #284]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d115      	bne.n	8001186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e07f      	b.n	800125e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d107      	bne.n	8001176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001166:	4b41      	ldr	r3, [pc, #260]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d109      	bne.n	8001186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e073      	b.n	800125e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001176:	4b3d      	ldr	r3, [pc, #244]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e06b      	b.n	800125e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001186:	4b39      	ldr	r3, [pc, #228]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f023 0203 	bic.w	r2, r3, #3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	4936      	ldr	r1, [pc, #216]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001194:	4313      	orrs	r3, r2
 8001196:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001198:	f7ff f830 	bl	80001fc <HAL_GetTick>
 800119c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119e:	e00a      	b.n	80011b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a0:	f7ff f82c 	bl	80001fc <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e053      	b.n	800125e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 020c 	and.w	r2, r3, #12
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d1eb      	bne.n	80011a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <HAL_RCC_ClockConfig+0x1c0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d210      	bcs.n	80011f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <HAL_RCC_ClockConfig+0x1c0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 0207 	bic.w	r2, r3, #7
 80011de:	4922      	ldr	r1, [pc, #136]	; (8001268 <HAL_RCC_ClockConfig+0x1c0>)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d001      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e032      	b.n	800125e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4916      	ldr	r1, [pc, #88]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001212:	4313      	orrs	r3, r2
 8001214:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d009      	beq.n	8001236 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	490e      	ldr	r1, [pc, #56]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	4313      	orrs	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001236:	f000 f821 	bl	800127c <HAL_RCC_GetSysClockFreq>
 800123a:	4601      	mov	r1, r0
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <HAL_RCC_ClockConfig+0x1c8>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	fa21 f303 	lsr.w	r3, r1, r3
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <HAL_RCC_ClockConfig+0x1cc>)
 8001250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <HAL_RCC_ClockConfig+0x1d0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7fe ff8e 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40022000 	.word	0x40022000
 800126c:	40021000 	.word	0x40021000
 8001270:	08002444 	.word	0x08002444
 8001274:	20000008 	.word	0x20000008
 8001278:	20000000 	.word	0x20000000

0800127c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800127c:	b490      	push	{r4, r7}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001282:	4b2a      	ldr	r3, [pc, #168]	; (800132c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001284:	1d3c      	adds	r4, r7, #4
 8001286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800128c:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_RCC_GetSysClockFreq+0xb4>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d002      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0x40>
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d003      	beq.n	80012c2 <HAL_RCC_GetSysClockFreq+0x46>
 80012ba:	e02d      	b.n	8001318 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012be:	623b      	str	r3, [r7, #32]
      break;
 80012c0:	e02d      	b.n	800131e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	0c9b      	lsrs	r3, r3, #18
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012ce:	4413      	add	r3, r2
 80012d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	0c5b      	lsrs	r3, r3, #17
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012ee:	4413      	add	r3, r2
 80012f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012fa:	fb02 f203 	mul.w	r2, r2, r3
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	fbb2 f3f3 	udiv	r3, r2, r3
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
 8001306:	e004      	b.n	8001312 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	4a0c      	ldr	r2, [pc, #48]	; (800133c <HAL_RCC_GetSysClockFreq+0xc0>)
 800130c:	fb02 f303 	mul.w	r3, r2, r3
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	623b      	str	r3, [r7, #32]
      break;
 8001316:	e002      	b.n	800131e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <HAL_RCC_GetSysClockFreq+0xbc>)
 800131a:	623b      	str	r3, [r7, #32]
      break;
 800131c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800131e:	6a3b      	ldr	r3, [r7, #32]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3728      	adds	r7, #40	; 0x28
 8001324:	46bd      	mov	sp, r7
 8001326:	bc90      	pop	{r4, r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	08002430 	.word	0x08002430
 8001330:	08002440 	.word	0x08002440
 8001334:	40021000 	.word	0x40021000
 8001338:	007a1200 	.word	0x007a1200
 800133c:	003d0900 	.word	0x003d0900

08001340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <HAL_RCC_GetHCLKFreq+0x10>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20000008 	.word	0x20000008

08001354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001358:	f7ff fff2 	bl	8001340 <HAL_RCC_GetHCLKFreq>
 800135c:	4601      	mov	r1, r0
 800135e:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	4a03      	ldr	r2, [pc, #12]	; (8001378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800136a:	5cd3      	ldrb	r3, [r2, r3]
 800136c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40021000 	.word	0x40021000
 8001378:	08002454 	.word	0x08002454

0800137c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001380:	f7ff ffde 	bl	8001340 <HAL_RCC_GetHCLKFreq>
 8001384:	4601      	mov	r1, r0
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	0adb      	lsrs	r3, r3, #11
 800138c:	f003 0307 	and.w	r3, r3, #7
 8001390:	4a03      	ldr	r2, [pc, #12]	; (80013a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001392:	5cd3      	ldrb	r3, [r2, r3]
 8001394:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001398:	4618      	mov	r0, r3
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	08002454 	.word	0x08002454

080013a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <RCC_Delay+0x34>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <RCC_Delay+0x38>)
 80013b2:	fba2 2303 	umull	r2, r3, r2, r3
 80013b6:	0a5b      	lsrs	r3, r3, #9
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013c0:	bf00      	nop
  }
  while (Delay --);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1e5a      	subs	r2, r3, #1
 80013c6:	60fa      	str	r2, [r7, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f9      	bne.n	80013c0 <RCC_Delay+0x1c>
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008
 80013dc:	10624dd3 	.word	0x10624dd3

080013e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e03f      	b.n	8001472 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d106      	bne.n	800140c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fe16 	bl	8002038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2224      	movs	r2, #36	; 0x24
 8001410:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68da      	ldr	r2, [r3, #12]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 fc35 	bl	8001c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2220      	movs	r2, #32
 8001464:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	4613      	mov	r3, r2
 8001488:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b20      	cmp	r3, #32
 8001494:	d153      	bne.n	800153e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <HAL_UART_Transmit_DMA+0x26>
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e04c      	b.n	8001540 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d101      	bne.n	80014b4 <HAL_UART_Transmit_DMA+0x38>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e045      	b.n	8001540 <HAL_UART_Transmit_DMA+0xc4>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80014bc:	68ba      	ldr	r2, [r7, #8]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	88fa      	ldrh	r2, [r7, #6]
 80014c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	88fa      	ldrh	r2, [r7, #6]
 80014cc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2221      	movs	r2, #33	; 0x21
 80014d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_UART_Transmit_DMA+0xcc>)
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	4a18      	ldr	r2, [pc, #96]	; (800154c <HAL_UART_Transmit_DMA+0xd0>)
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_UART_Transmit_DMA+0xd4>)
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	2200      	movs	r2, #0
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	6819      	ldr	r1, [r3, #0]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3304      	adds	r3, #4
 8001510:	461a      	mov	r2, r3
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	f7fe ffe4 	bl	80004e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001520:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001538:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800153e:	2302      	movs	r3, #2
  }
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	080018a7 	.word	0x080018a7
 800154c:	080018f9 	.word	0x080018f9
 8001550:	08001999 	.word	0x08001999

08001554 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	4613      	mov	r3, r2
 8001560:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b20      	cmp	r3, #32
 800156c:	d166      	bne.n	800163c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <HAL_UART_Receive_DMA+0x26>
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e05f      	b.n	800163e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001584:	2b01      	cmp	r3, #1
 8001586:	d101      	bne.n	800158c <HAL_UART_Receive_DMA+0x38>
 8001588:	2302      	movs	r3, #2
 800158a:	e058      	b.n	800163e <HAL_UART_Receive_DMA+0xea>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001594:	68ba      	ldr	r2, [r7, #8]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2222      	movs	r2, #34	; 0x22
 80015aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015b2:	4a25      	ldr	r2, [pc, #148]	; (8001648 <HAL_UART_Receive_DMA+0xf4>)
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ba:	4a24      	ldr	r2, [pc, #144]	; (800164c <HAL_UART_Receive_DMA+0xf8>)
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c2:	4a23      	ldr	r2, [pc, #140]	; (8001650 <HAL_UART_Receive_DMA+0xfc>)
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ca:	2200      	movs	r2, #0
 80015cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3304      	adds	r3, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	f7fe ff7b 	bl	80004e0 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001616:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001636:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	e000      	b.n	800163e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800163c:	2302      	movs	r3, #2
  }
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	08001915 	.word	0x08001915
 800164c:	0800197d 	.word	0x0800197d
 8001650:	08001999 	.word	0x08001999

08001654 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10d      	bne.n	80016a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	f003 0320 	and.w	r3, r3, #32
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <HAL_UART_IRQHandler+0x52>
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	f003 0320 	and.w	r3, r3, #32
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fa77 	bl	8001b92 <UART_Receive_IT>
      return;
 80016a4:	e0cc      	b.n	8001840 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80ab 	beq.w	8001804 <HAL_UART_IRQHandler+0x1b0>
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <HAL_UART_IRQHandler+0x70>
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80a0 	beq.w	8001804 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00a      	beq.n	80016e4 <HAL_UART_IRQHandler+0x90>
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00a      	beq.n	8001704 <HAL_UART_IRQHandler+0xb0>
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fc:	f043 0202 	orr.w	r2, r3, #2
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00a      	beq.n	8001724 <HAL_UART_IRQHandler+0xd0>
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171c:	f043 0204 	orr.w	r2, r3, #4
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00a      	beq.n	8001744 <HAL_UART_IRQHandler+0xf0>
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173c:	f043 0208 	orr.w	r2, r3, #8
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d078      	beq.n	800183e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	2b00      	cmp	r3, #0
 8001754:	d007      	beq.n	8001766 <HAL_UART_IRQHandler+0x112>
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d002      	beq.n	8001766 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f000 fa16 	bl	8001b92 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	695b      	ldr	r3, [r3, #20]
 800176c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001770:	2b00      	cmp	r3, #0
 8001772:	bf14      	ite	ne
 8001774:	2301      	movne	r3, #1
 8001776:	2300      	moveq	r3, #0
 8001778:	b2db      	uxtb	r3, r3
 800177a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b00      	cmp	r3, #0
 8001786:	d102      	bne.n	800178e <HAL_UART_IRQHandler+0x13a>
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d031      	beq.n	80017f2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f961 	bl	8001a56 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d023      	beq.n	80017ea <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	695a      	ldr	r2, [r3, #20]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d013      	beq.n	80017e2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017be:	4a22      	ldr	r2, [pc, #136]	; (8001848 <HAL_UART_IRQHandler+0x1f4>)
 80017c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe feea 	bl	80005a0 <HAL_DMA_Abort_IT>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d016      	beq.n	8001800 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017dc:	4610      	mov	r0, r2
 80017de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017e0:	e00e      	b.n	8001800 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f856 	bl	8001894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017e8:	e00a      	b.n	8001800 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f852 	bl	8001894 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017f0:	e006      	b.n	8001800 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f84e 	bl	8001894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80017fe:	e01e      	b.n	800183e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001800:	bf00      	nop
    return;
 8001802:	e01c      	b.n	800183e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <HAL_UART_IRQHandler+0x1cc>
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f94d 	bl	8001ab8 <UART_Transmit_IT>
    return;
 800181e:	e00f      	b.n	8001840 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d00a      	beq.n	8001840 <HAL_UART_IRQHandler+0x1ec>
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f994 	bl	8001b62 <UART_EndTransmit_IT>
    return;
 800183a:	bf00      	nop
 800183c:	e000      	b.n	8001840 <HAL_UART_IRQHandler+0x1ec>
    return;
 800183e:	bf00      	nop
  }
}
 8001840:	3720      	adds	r7, #32
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	08001a91 	.word	0x08001a91

0800184c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b084      	sub	sp, #16
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d113      	bne.n	80018ea <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018d6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68da      	ldr	r2, [r3, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018e6:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80018e8:	e002      	b.n	80018f0 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7ff ffae 	bl	800184c <HAL_UART_TxCpltCallback>
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f7ff ffa9 	bl	800185e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800190c:	bf00      	nop
 800190e:	3710      	adds	r7, #16
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b00      	cmp	r3, #0
 800192e:	d11e      	bne.n	800196e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001944:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001964:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7ff ff7e 	bl	8001870 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f7ff ff79 	bl	8001882 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001990:	bf00      	nop
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf14      	ite	ne
 80019b8:	2301      	movne	r3, #1
 80019ba:	2300      	moveq	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b21      	cmp	r3, #33	; 0x21
 80019ca:	d108      	bne.n	80019de <UART_DMAError+0x46>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2200      	movs	r2, #0
 80019d6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f000 f827 	bl	8001a2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf14      	ite	ne
 80019ec:	2301      	movne	r3, #1
 80019ee:	2300      	moveq	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b22      	cmp	r3, #34	; 0x22
 80019fe:	d108      	bne.n	8001a12 <UART_DMAError+0x7a>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001a0c:	68b8      	ldr	r0, [r7, #8]
 8001a0e:	f000 f822 	bl	8001a56 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a16:	f043 0210 	orr.w	r2, r3, #16
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001a1e:	68b8      	ldr	r0, [r7, #8]
 8001a20:	f7ff ff38 	bl	8001894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001a42:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2220      	movs	r2, #32
 8001a48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001a6c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2220      	movs	r2, #32
 8001a82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bc80      	pop	{r7}
 8001a8e:	4770      	bx	lr

08001a90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff fef2 	bl	8001894 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ab0:	bf00      	nop
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	2b21      	cmp	r3, #33	; 0x21
 8001aca:	d144      	bne.n	8001b56 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ad4:	d11a      	bne.n	8001b0c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aea:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d105      	bne.n	8001b00 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	1c9a      	adds	r2, r3, #2
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	621a      	str	r2, [r3, #32]
 8001afe:	e00e      	b.n	8001b1e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	621a      	str	r2, [r3, #32]
 8001b0a:	e008      	b.n	8001b1e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	1c59      	adds	r1, r3, #1
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6211      	str	r1, [r2, #32]
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3b01      	subs	r3, #1
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10f      	bne.n	8001b52 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001b56:	2302      	movs	r3, #2
  }
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68da      	ldr	r2, [r3, #12]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b78:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fe62 	bl	800184c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b22      	cmp	r3, #34	; 0x22
 8001ba4:	d171      	bne.n	8001c8a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bae:	d123      	bne.n	8001bf8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10e      	bne.n	8001bdc <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	1c9a      	adds	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
 8001bda:	e029      	b.n	8001c30 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	629a      	str	r2, [r3, #40]	; 0x28
 8001bf6:	e01b      	b.n	8001c30 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6858      	ldr	r0, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	1c59      	adds	r1, r3, #1
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6291      	str	r1, [r2, #40]	; 0x28
 8001c10:	b2c2      	uxtb	r2, r0
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	e00c      	b.n	8001c30 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	1c58      	adds	r0, r3, #1
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	6288      	str	r0, [r1, #40]	; 0x28
 8001c28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d120      	bne.n	8001c86 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0220 	bic.w	r2, r2, #32
 8001c52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff fdf7 	bl	8001870 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e002      	b.n	8001c8c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
  }
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001cce:	f023 030c 	bic.w	r3, r3, #12
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	68f9      	ldr	r1, [r7, #12]
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699a      	ldr	r2, [r3, #24]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <UART_SetConfig+0x1ac>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d14e      	bne.n	8001d9a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cfc:	f7ff fb3e 	bl	800137c <HAL_RCC_GetPCLK2Freq>
 8001d00:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	009a      	lsls	r2, r3, #2
 8001d0c:	441a      	add	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	4a4a      	ldr	r2, [pc, #296]	; (8001e44 <UART_SetConfig+0x1b0>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	0119      	lsls	r1, r3, #4
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	009a      	lsls	r2, r3, #2
 8001d2c:	441a      	add	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d38:	4b42      	ldr	r3, [pc, #264]	; (8001e44 <UART_SetConfig+0x1b0>)
 8001d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2064      	movs	r0, #100	; 0x64
 8001d42:	fb00 f303 	mul.w	r3, r0, r3
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	3332      	adds	r3, #50	; 0x32
 8001d4c:	4a3d      	ldr	r2, [pc, #244]	; (8001e44 <UART_SetConfig+0x1b0>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d58:	4419      	add	r1, r3
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	009a      	lsls	r2, r3, #2
 8001d64:	441a      	add	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d70:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <UART_SetConfig+0x1b0>)
 8001d72:	fba3 0302 	umull	r0, r3, r3, r2
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2064      	movs	r0, #100	; 0x64
 8001d7a:	fb00 f303 	mul.w	r3, r0, r3
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	3332      	adds	r3, #50	; 0x32
 8001d84:	4a2f      	ldr	r2, [pc, #188]	; (8001e44 <UART_SetConfig+0x1b0>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	f003 020f 	and.w	r2, r3, #15
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	440a      	add	r2, r1
 8001d96:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001d98:	e04d      	b.n	8001e36 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d9a:	f7ff fadb 	bl	8001354 <HAL_RCC_GetPCLK1Freq>
 8001d9e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	4613      	mov	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	009a      	lsls	r2, r3, #2
 8001daa:	441a      	add	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <UART_SetConfig+0x1b0>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	095b      	lsrs	r3, r3, #5
 8001dbe:	0119      	lsls	r1, r3, #4
 8001dc0:	68ba      	ldr	r2, [r7, #8]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	4413      	add	r3, r2
 8001dc8:	009a      	lsls	r2, r3, #2
 8001dca:	441a      	add	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <UART_SetConfig+0x1b0>)
 8001dd8:	fba3 0302 	umull	r0, r3, r3, r2
 8001ddc:	095b      	lsrs	r3, r3, #5
 8001dde:	2064      	movs	r0, #100	; 0x64
 8001de0:	fb00 f303 	mul.w	r3, r0, r3
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	3332      	adds	r3, #50	; 0x32
 8001dea:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <UART_SetConfig+0x1b0>)
 8001dec:	fba2 2303 	umull	r2, r3, r2, r3
 8001df0:	095b      	lsrs	r3, r3, #5
 8001df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001df6:	4419      	add	r1, r3
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	009a      	lsls	r2, r3, #2
 8001e02:	441a      	add	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <UART_SetConfig+0x1b0>)
 8001e10:	fba3 0302 	umull	r0, r3, r3, r2
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	2064      	movs	r0, #100	; 0x64
 8001e18:	fb00 f303 	mul.w	r3, r0, r3
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	3332      	adds	r3, #50	; 0x32
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <UART_SetConfig+0x1b0>)
 8001e24:	fba2 2303 	umull	r2, r3, r2, r3
 8001e28:	095b      	lsrs	r3, r3, #5
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	440a      	add	r2, r1
 8001e34:	609a      	str	r2, [r3, #8]
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40013800 	.word	0x40013800
 8001e44:	51eb851f 	.word	0x51eb851f

08001e48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  HAL_Init();
 8001e4c:	f7fe f97e 	bl	800014c <HAL_Init>

  SystemClock_Config();
 8001e50:	f000 f818 	bl	8001e84 <SystemClock_Config>

  MX_GPIO_Init();
 8001e54:	f000 f8a2 	bl	8001f9c <MX_GPIO_Init>
  MX_DMA_Init();
 8001e58:	f000 f87a 	bl	8001f50 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001e5c:	f000 f84e 	bl	8001efc <MX_USART1_UART_Init>

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <main+0x34>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <main+0x34>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0210 	orr.w	r2, r2, #16
 8001e6e:	60da      	str	r2, [r3, #12]
  HAL_UART_Receive_DMA(&huart1, Rx_data, RX_LENGTH);
 8001e70:	2214      	movs	r2, #20
 8001e72:	4903      	ldr	r1, [pc, #12]	; (8001e80 <main+0x38>)
 8001e74:	4801      	ldr	r0, [pc, #4]	; (8001e7c <main+0x34>)
 8001e76:	f7ff fb6d 	bl	8001554 <HAL_UART_Receive_DMA>

  while (1)
 8001e7a:	e7fe      	b.n	8001e7a <main+0x32>
 8001e7c:	200000f4 	.word	0x200000f4
 8001e80:	20000058 	.word	0x20000058

08001e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b090      	sub	sp, #64	; 0x40
 8001e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8a:	f107 0318 	add.w	r3, r7, #24
 8001e8e:	2228      	movs	r2, #40	; 0x28
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fab7 	bl	8002406 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eae:	2310      	movs	r3, #16
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb6:	f107 0318 	add.w	r3, r7, #24
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fe74 	bl	8000ba8 <HAL_RCC_OscConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001ec6:	f000 f87f 	bl	8001fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eca:	230f      	movs	r3, #15
 8001ecc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff f8e0 	bl	80010a8 <HAL_RCC_ClockConfig>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001eee:	f000 f86b 	bl	8001fc8 <Error_Handler>
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	3740      	adds	r7, #64	; 0x40
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <MX_USART1_UART_Init+0x4c>)
 8001f02:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <MX_USART1_UART_Init+0x50>)
 8001f04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <MX_USART1_UART_Init+0x4c>)
 8001f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <MX_USART1_UART_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <MX_USART1_UART_Init+0x4c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <MX_USART1_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <MX_USART1_UART_Init+0x4c>)
 8001f22:	220c      	movs	r2, #12
 8001f24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <MX_USART1_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <MX_USART1_UART_Init+0x4c>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f32:	4805      	ldr	r0, [pc, #20]	; (8001f48 <MX_USART1_UART_Init+0x4c>)
 8001f34:	f7ff fa54 	bl	80013e0 <HAL_UART_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f3e:	f000 f843 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200000f4 	.word	0x200000f4
 8001f4c:	40013800 	.word	0x40013800

08001f50 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f56:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <MX_DMA_Init+0x48>)
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <MX_DMA_Init+0x48>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6153      	str	r3, [r2, #20]
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <MX_DMA_Init+0x48>)
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	607b      	str	r3, [r7, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	200e      	movs	r0, #14
 8001f74:	f7fe fa23 	bl	80003be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f78:	200e      	movs	r0, #14
 8001f7a:	f7fe fa3c 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	200f      	movs	r0, #15
 8001f84:	f7fe fa1b 	bl	80003be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f88:	200f      	movs	r0, #15
 8001f8a:	f7fe fa34 	bl	80003f6 <HAL_NVIC_EnableIRQ>

}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000

08001f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <MX_GPIO_Init+0x28>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	4a07      	ldr	r2, [pc, #28]	; (8001fc4 <MX_GPIO_Init+0x28>)
 8001fa8:	f043 0304 	orr.w	r3, r3, #4
 8001fac:	6193      	str	r3, [r2, #24]
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <MX_GPIO_Init+0x28>)
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]

}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_MspInit+0x5c>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	4a14      	ldr	r2, [pc, #80]	; (8002030 <HAL_MspInit+0x5c>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6193      	str	r3, [r2, #24]
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_MspInit+0x5c>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_MspInit+0x5c>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a0e      	ldr	r2, [pc, #56]	; (8002030 <HAL_MspInit+0x5c>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_MspInit+0x5c>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800200a:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <HAL_MspInit+0x60>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	4a04      	ldr	r2, [pc, #16]	; (8002034 <HAL_MspInit+0x60>)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	40021000 	.word	0x40021000
 8002034:	40010000 	.word	0x40010000

08002038 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0310 	add.w	r3, r7, #16
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a47      	ldr	r2, [pc, #284]	; (8002170 <HAL_UART_MspInit+0x138>)
 8002054:	4293      	cmp	r3, r2
 8002056:	f040 8086 	bne.w	8002166 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800205a:	4b46      	ldr	r3, [pc, #280]	; (8002174 <HAL_UART_MspInit+0x13c>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	4a45      	ldr	r2, [pc, #276]	; (8002174 <HAL_UART_MspInit+0x13c>)
 8002060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002064:	6193      	str	r3, [r2, #24]
 8002066:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HAL_UART_MspInit+0x13c>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	4b40      	ldr	r3, [pc, #256]	; (8002174 <HAL_UART_MspInit+0x13c>)
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	4a3f      	ldr	r2, [pc, #252]	; (8002174 <HAL_UART_MspInit+0x13c>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	6193      	str	r3, [r2, #24]
 800207e:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_UART_MspInit+0x13c>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800208a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800208e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002094:	2303      	movs	r3, #3
 8002096:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	4836      	ldr	r0, [pc, #216]	; (8002178 <HAL_UART_MspInit+0x140>)
 80020a0:	f7fe fc28 	bl	80008f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b2:	f107 0310 	add.w	r3, r7, #16
 80020b6:	4619      	mov	r1, r3
 80020b8:	482f      	ldr	r0, [pc, #188]	; (8002178 <HAL_UART_MspInit+0x140>)
 80020ba:	f7fe fc1b 	bl	80008f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80020be:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_UART_MspInit+0x144>)
 80020c0:	4a2f      	ldr	r2, [pc, #188]	; (8002180 <HAL_UART_MspInit+0x148>)
 80020c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020c4:	4b2d      	ldr	r3, [pc, #180]	; (800217c <HAL_UART_MspInit+0x144>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020ca:	4b2c      	ldr	r3, [pc, #176]	; (800217c <HAL_UART_MspInit+0x144>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020d0:	4b2a      	ldr	r3, [pc, #168]	; (800217c <HAL_UART_MspInit+0x144>)
 80020d2:	2280      	movs	r2, #128	; 0x80
 80020d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d6:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_UART_MspInit+0x144>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <HAL_UART_MspInit+0x144>)
 80020de:	2200      	movs	r2, #0
 80020e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_UART_MspInit+0x144>)
 80020e4:	2220      	movs	r2, #32
 80020e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_UART_MspInit+0x144>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020ee:	4823      	ldr	r0, [pc, #140]	; (800217c <HAL_UART_MspInit+0x144>)
 80020f0:	f7fe f99c 	bl	800042c <HAL_DMA_Init>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80020fa:	f7ff ff65 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a1e      	ldr	r2, [pc, #120]	; (800217c <HAL_UART_MspInit+0x144>)
 8002102:	635a      	str	r2, [r3, #52]	; 0x34
 8002104:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_UART_MspInit+0x144>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_UART_MspInit+0x14c>)
 800210c:	4a1e      	ldr	r2, [pc, #120]	; (8002188 <HAL_UART_MspInit+0x150>)
 800210e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_UART_MspInit+0x14c>)
 8002112:	2210      	movs	r2, #16
 8002114:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_UART_MspInit+0x14c>)
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_UART_MspInit+0x14c>)
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <HAL_UART_MspInit+0x14c>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <HAL_UART_MspInit+0x14c>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_UART_MspInit+0x14c>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <HAL_UART_MspInit+0x14c>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800213a:	4812      	ldr	r0, [pc, #72]	; (8002184 <HAL_UART_MspInit+0x14c>)
 800213c:	f7fe f976 	bl	800042c <HAL_DMA_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002146:	f7ff ff3f 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a0d      	ldr	r2, [pc, #52]	; (8002184 <HAL_UART_MspInit+0x14c>)
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_UART_MspInit+0x14c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	2025      	movs	r0, #37	; 0x25
 800215c:	f7fe f92f 	bl	80003be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002160:	2025      	movs	r0, #37	; 0x25
 8002162:	f7fe f948 	bl	80003f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002166:	bf00      	nop
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40013800 	.word	0x40013800
 8002174:	40021000 	.word	0x40021000
 8002178:	40010800 	.word	0x40010800
 800217c:	200000b0 	.word	0x200000b0
 8002180:	40020058 	.word	0x40020058
 8002184:	2000006c 	.word	0x2000006c
 8002188:	40020044 	.word	0x40020044

0800218c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219c:	e7fe      	b.n	800219c <HardFault_Handler+0x4>

0800219e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <MemManage_Handler+0x4>

080021a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <BusFault_Handler+0x4>

080021aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <UsageFault_Handler+0x4>

080021b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d8:	f7fd fffe 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}

080021e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <DMA1_Channel4_IRQHandler+0x10>)
 80021e6:	f7fe fa51 	bl	800068c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2000006c 	.word	0x2000006c

080021f4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <DMA1_Channel5_IRQHandler+0x10>)
 80021fa:	f7fe fa47 	bl	800068c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200000b0 	.word	0x200000b0

08002208 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
  static uint8_t old_pos = 0;
  uint8_t pos;

  HAL_UART_IRQHandler(&huart1);
 800220e:	4834      	ldr	r0, [pc, #208]	; (80022e0 <USART1_IRQHandler+0xd8>)
 8002210:	f7ff fa20 	bl	8001654 <HAL_UART_IRQHandler>

  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET) {
 8002214:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <USART1_IRQHandler+0xd8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b10      	cmp	r3, #16
 8002220:	d15a      	bne.n	80022d8 <USART1_IRQHandler+0xd0>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <USART1_IRQHandler+0xd8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <USART1_IRQHandler+0xd8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	683b      	ldr	r3, [r7, #0]

	  pos = RX_LENGTH - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8002238:	4b2a      	ldr	r3, [pc, #168]	; (80022e4 <USART1_IRQHandler+0xdc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	f1c3 0314 	rsb	r3, r3, #20
 8002244:	71fb      	strb	r3, [r7, #7]
	  if (pos != old_pos){
 8002246:	4b28      	ldr	r3, [pc, #160]	; (80022e8 <USART1_IRQHandler+0xe0>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	79fa      	ldrb	r2, [r7, #7]
 800224c:	429a      	cmp	r2, r3
 800224e:	d040      	beq.n	80022d2 <USART1_IRQHandler+0xca>
		  if (pos > old_pos){
 8002250:	4b25      	ldr	r3, [pc, #148]	; (80022e8 <USART1_IRQHandler+0xe0>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	79fa      	ldrb	r2, [r7, #7]
 8002256:	429a      	cmp	r2, r3
 8002258:	d910      	bls.n	800227c <USART1_IRQHandler+0x74>
			  HAL_UART_Transmit_DMA(&huart1, Rx_data + old_pos, pos - old_pos);
 800225a:	4b23      	ldr	r3, [pc, #140]	; (80022e8 <USART1_IRQHandler+0xe0>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	4b22      	ldr	r3, [pc, #136]	; (80022ec <USART1_IRQHandler+0xe4>)
 8002262:	18d1      	adds	r1, r2, r3
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	b29a      	uxth	r2, r3
 8002268:	4b1f      	ldr	r3, [pc, #124]	; (80022e8 <USART1_IRQHandler+0xe0>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	b29b      	uxth	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	481a      	ldr	r0, [pc, #104]	; (80022e0 <USART1_IRQHandler+0xd8>)
 8002276:	f7ff f901 	bl	800147c <HAL_UART_Transmit_DMA>
 800227a:	e02a      	b.n	80022d2 <USART1_IRQHandler+0xca>
		  } else if (pos < old_pos){
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <USART1_IRQHandler+0xe0>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	79fa      	ldrb	r2, [r7, #7]
 8002282:	429a      	cmp	r2, r3
 8002284:	d225      	bcs.n	80022d2 <USART1_IRQHandler+0xca>
			  uint8_t tmpRX_length = RX_LENGTH - old_pos + pos;
 8002286:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <USART1_IRQHandler+0xe0>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	79fa      	ldrb	r2, [r7, #7]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3314      	adds	r3, #20
 8002292:	71bb      	strb	r3, [r7, #6]
			  static char tmp_rx[RX_LENGTH];
			  memcpy (&tmp_rx , &Rx_data[old_pos], RX_LENGTH - old_pos);
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <USART1_IRQHandler+0xe0>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	461a      	mov	r2, r3
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <USART1_IRQHandler+0xe4>)
 800229c:	18d1      	adds	r1, r2, r3
 800229e:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <USART1_IRQHandler+0xe0>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f1c3 0314 	rsb	r3, r3, #20
 80022a6:	461a      	mov	r2, r3
 80022a8:	4811      	ldr	r0, [pc, #68]	; (80022f0 <USART1_IRQHandler+0xe8>)
 80022aa:	f000 f8a1 	bl	80023f0 <memcpy>
			  memcpy (&tmp_rx[RX_LENGTH - old_pos], &Rx_data[0] , pos);
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <USART1_IRQHandler+0xe0>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	f1c3 0314 	rsb	r3, r3, #20
 80022b6:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <USART1_IRQHandler+0xe8>)
 80022b8:	4413      	add	r3, r2
 80022ba:	79fa      	ldrb	r2, [r7, #7]
 80022bc:	490b      	ldr	r1, [pc, #44]	; (80022ec <USART1_IRQHandler+0xe4>)
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f896 	bl	80023f0 <memcpy>
			  HAL_UART_Transmit_DMA(&huart1, &tmp_rx, tmpRX_length);
 80022c4:	79bb      	ldrb	r3, [r7, #6]
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	4909      	ldr	r1, [pc, #36]	; (80022f0 <USART1_IRQHandler+0xe8>)
 80022cc:	4804      	ldr	r0, [pc, #16]	; (80022e0 <USART1_IRQHandler+0xd8>)
 80022ce:	f7ff f8d5 	bl	800147c <HAL_UART_Transmit_DMA>
		  }
	  }

	  old_pos = pos;
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <USART1_IRQHandler+0xe0>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	7013      	strb	r3, [r2, #0]
  }
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	200000f4 	.word	0x200000f4
 80022e4:	200000b0 	.word	0x200000b0
 80022e8:	20000028 	.word	0x20000028
 80022ec:	20000058 	.word	0x20000058
 80022f0:	2000002c 	.word	0x2000002c

080022f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80022f8:	4b15      	ldr	r3, [pc, #84]	; (8002350 <SystemInit+0x5c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a14      	ldr	r2, [pc, #80]	; (8002350 <SystemInit+0x5c>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <SystemInit+0x5c>)
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	4911      	ldr	r1, [pc, #68]	; (8002350 <SystemInit+0x5c>)
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <SystemInit+0x60>)
 800230c:	4013      	ands	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <SystemInit+0x5c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <SystemInit+0x5c>)
 8002316:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800231a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <SystemInit+0x5c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <SystemInit+0x5c>)
 8002326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800232c:	4b08      	ldr	r3, [pc, #32]	; (8002350 <SystemInit+0x5c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a07      	ldr	r2, [pc, #28]	; (8002350 <SystemInit+0x5c>)
 8002332:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002336:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <SystemInit+0x5c>)
 800233a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800233e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <SystemInit+0x64>)
 8002342:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002346:	609a      	str	r2, [r3, #8]
#endif 
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	40021000 	.word	0x40021000
 8002354:	f8ff0000 	.word	0xf8ff0000
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800235c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800235e:	e003      	b.n	8002368 <LoopCopyDataInit>

08002360 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002362:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002364:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002366:	3104      	adds	r1, #4

08002368 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002368:	480a      	ldr	r0, [pc, #40]	; (8002394 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800236c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800236e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002370:	d3f6      	bcc.n	8002360 <CopyDataInit>
  ldr r2, =_sbss
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002374:	e002      	b.n	800237c <LoopFillZerobss>

08002376 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002376:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002378:	f842 3b04 	str.w	r3, [r2], #4

0800237c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800237c:	4b08      	ldr	r3, [pc, #32]	; (80023a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800237e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002380:	d3f9      	bcc.n	8002376 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002382:	f7ff ffb7 	bl	80022f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002386:	f000 f80f 	bl	80023a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800238a:	f7ff fd5d 	bl	8001e48 <main>
  bx lr
 800238e:	4770      	bx	lr
  ldr r3, =_sidata
 8002390:	08002464 	.word	0x08002464
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002398:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800239c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80023a0:	20000134 	.word	0x20000134

080023a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023a4:	e7fe      	b.n	80023a4 <ADC1_2_IRQHandler>
	...

080023a8 <__libc_init_array>:
 80023a8:	b570      	push	{r4, r5, r6, lr}
 80023aa:	2500      	movs	r5, #0
 80023ac:	4e0c      	ldr	r6, [pc, #48]	; (80023e0 <__libc_init_array+0x38>)
 80023ae:	4c0d      	ldr	r4, [pc, #52]	; (80023e4 <__libc_init_array+0x3c>)
 80023b0:	1ba4      	subs	r4, r4, r6
 80023b2:	10a4      	asrs	r4, r4, #2
 80023b4:	42a5      	cmp	r5, r4
 80023b6:	d109      	bne.n	80023cc <__libc_init_array+0x24>
 80023b8:	f000 f82e 	bl	8002418 <_init>
 80023bc:	2500      	movs	r5, #0
 80023be:	4e0a      	ldr	r6, [pc, #40]	; (80023e8 <__libc_init_array+0x40>)
 80023c0:	4c0a      	ldr	r4, [pc, #40]	; (80023ec <__libc_init_array+0x44>)
 80023c2:	1ba4      	subs	r4, r4, r6
 80023c4:	10a4      	asrs	r4, r4, #2
 80023c6:	42a5      	cmp	r5, r4
 80023c8:	d105      	bne.n	80023d6 <__libc_init_array+0x2e>
 80023ca:	bd70      	pop	{r4, r5, r6, pc}
 80023cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023d0:	4798      	blx	r3
 80023d2:	3501      	adds	r5, #1
 80023d4:	e7ee      	b.n	80023b4 <__libc_init_array+0xc>
 80023d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023da:	4798      	blx	r3
 80023dc:	3501      	adds	r5, #1
 80023de:	e7f2      	b.n	80023c6 <__libc_init_array+0x1e>
 80023e0:	0800245c 	.word	0x0800245c
 80023e4:	0800245c 	.word	0x0800245c
 80023e8:	0800245c 	.word	0x0800245c
 80023ec:	08002460 	.word	0x08002460

080023f0 <memcpy>:
 80023f0:	b510      	push	{r4, lr}
 80023f2:	1e43      	subs	r3, r0, #1
 80023f4:	440a      	add	r2, r1
 80023f6:	4291      	cmp	r1, r2
 80023f8:	d100      	bne.n	80023fc <memcpy+0xc>
 80023fa:	bd10      	pop	{r4, pc}
 80023fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002400:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002404:	e7f7      	b.n	80023f6 <memcpy+0x6>

08002406 <memset>:
 8002406:	4603      	mov	r3, r0
 8002408:	4402      	add	r2, r0
 800240a:	4293      	cmp	r3, r2
 800240c:	d100      	bne.n	8002410 <memset+0xa>
 800240e:	4770      	bx	lr
 8002410:	f803 1b01 	strb.w	r1, [r3], #1
 8002414:	e7f9      	b.n	800240a <memset+0x4>
	...

08002418 <_init>:
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	bf00      	nop
 800241c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800241e:	bc08      	pop	{r3}
 8002420:	469e      	mov	lr, r3
 8002422:	4770      	bx	lr

08002424 <_fini>:
 8002424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002426:	bf00      	nop
 8002428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800242a:	bc08      	pop	{r3}
 800242c:	469e      	mov	lr, r3
 800242e:	4770      	bx	lr
